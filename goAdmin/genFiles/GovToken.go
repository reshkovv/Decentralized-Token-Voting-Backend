// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package genFiles

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// CheckpointsCheckpoint208 is an auto generated low-level Go binding around an user-defined struct.
type CheckpointsCheckpoint208 struct {
	Key   *big.Int
	Value *big.Int
}

// GovTokenMetaData contains all meta data concerning the GovToken contract.
var GovTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increasedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20ExceededSafeSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"clock\",\"type\":\"uint48\"}],\"name\":\"ERC5805FutureLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC6372InconsistentClock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"VotesExpiredSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotes\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"_key\",\"type\":\"uint48\"},{\"internalType\":\"uint208\",\"name\":\"_value\",\"type\":\"uint208\"}],\"internalType\":\"structCheckpoints.Checkpoint208\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x610160604052348015610010575f80fd5b506040518060400160405280600881526020016723b7bb2a37b5b2b760c11b81525080604051806040016040528060018152602001603160f81b8152506040518060400160405280600881526020016723b7bb2a37b5b2b760c11b8152506040518060400160405280600381526020016223a7ab60e91b815250816003908161009991906108fb565b5060046100a682826108fb565b506100b69150839050600561019b565b610120526100c581600661019b565b61014052815160208084019190912060e052815190820120610100524660a05261015160e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60805250503060c0525061016f3369152d02c7e14af68000006101cd565b610196737a4ee6f9f0ab037fe771fc36d39c1e19bcc0fdb568056bc75e2d631000006101cd565b610a93565b5f6020835110156101b6576101af8361020a565b90506101c7565b816101c184826108fb565b5060ff90505b92915050565b6001600160a01b0382166101fb5760405163ec442f0560e01b81525f60048201526024015b60405180910390fd5b6102065f8383610247565b5050565b5f80829050601f81511115610234578260405163305a27a960e01b81526004016101f291906109ba565b805161023f826109ef565b179392505050565b610252838383610257565b505050565b6102628383836102bd565b6001600160a01b0383166102b2575f61027a60025490565b90506001600160d01b03808211156102af57604051630e58ae9360e11b815260048101839052602481018290526044016101f2565b50505b6102528383836103e3565b6001600160a01b0383166102e7578060025f8282546102dc9190610a26565b909155506103579050565b6001600160a01b0383165f90815260208190526040902054818110156103395760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016101f2565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b03821661037357600280548290039055610391565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516103d691815260200190565b60405180910390a3505050565b6001600160a01b0383166104115761040e600a6108c561046b60201b176104098461047d565b6104b4565b50505b6001600160a01b03821661043a57610437600a6108d06104e960201b176104098461047d565b50505b6001600160a01b038381165f90815260086020526040808220548584168352912054610252929182169116836104f4565b5f6104768284610a39565b9392505050565b5f6001600160d01b038211156104b0576040516306dfcc6560e41b815260d06004820152602481018390526044016101f2565b5090565b5f806104dc6104c1610644565b6104d46104cd88610652565b868860201c565b879190610699565b915091505b935093915050565b5f6104768284610a60565b816001600160a01b0316836001600160a01b03161415801561051557505f81115b15610252576001600160a01b038316156105ad576001600160a01b0383165f9081526009602090815260408220829161055b91906104e9901b6108d0176104098661047d565b6001600160d01b031691506001600160d01b03169150846001600160a01b03165f8051602061286583398151915283836040516105a2929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615610252576001600160a01b0382165f908152600960209081526040822082916105ee919061046b901b6108c5176104098661047d565b6001600160d01b031691506001600160d01b03169150836001600160a01b03165f805160206128658339815191528383604051610635929190918252602082015260400190565b60405180910390a25050505050565b5f61064d6106a6565b905090565b80545f908015610691576106788361066b600184610a80565b5f91825260209091200190565b54660100000000000090046001600160d01b0316610476565b5f9392505050565b5f806104dc8585856106b0565b5f61064d43610832565b82545f90819080156107d5575f6106cc8761066b600185610a80565b60408051808201909152905465ffffffffffff80821680845266010000000000009092046001600160d01b03166020840152919250908716101561072357604051632520601d60e01b815260040160405180910390fd5b805165ffffffffffff80881691160361077257846107468861066b600186610a80565b80546001600160d01b039290921666010000000000000265ffffffffffff9092169190911790556107c5565b6040805180820190915265ffffffffffff80881682526001600160d01b0380881660208085019182528b54600181018d555f8d815291909120945191519092166601000000000000029216919091179101555b6020015192508391506104e19050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a555f8a81529182209551925190931666010000000000000291909316179201919091559050816104e1565b5f65ffffffffffff8211156104b0576040516306dfcc6560e41b815260306004820152602481018390526044016101f2565b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061088c57607f821691505b6020821081036108aa57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561025257805f5260205f20601f840160051c810160208510156108d55750805b601f840160051c820191505b818110156108f4575f81556001016108e1565b5050505050565b81516001600160401b0381111561091457610914610864565b610928816109228454610878565b846108b0565b602080601f83116001811461095b575f84156109445750858301515b5f19600386901b1c1916600185901b1785556109b2565b5f85815260208120601f198616915b828110156109895788860151825594840194600190910190840161096a565b50858210156109a657878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b805160208083015191908110156108aa575f1960209190910360031b1b16919050565b634e487b7160e01b5f52601160045260245ffd5b808201808211156101c7576101c7610a12565b6001600160d01b03818116838216019080821115610a5957610a59610a12565b5092915050565b6001600160d01b03828116828216039080821115610a5957610a59610a12565b818103818111156101c7576101c7610a12565b60805160a05160c05160e051610100516101205161014051611d81610ae45f395f610cc101525f610c9401525f610a9e01525f610a7601525f6109d101525f6109fb01525f610a250152611d815ff3fe608060405234801561000f575f80fd5b5060043610610148575f3560e01c806370a08231116100bf5780639ab24eb0116100795780639ab24eb0146102f4578063a9059cbb14610307578063c3cda5201461031a578063d505accf1461032d578063dd62ed3e14610340578063f1127ed814610378575f80fd5b806370a08231146102645780637ecebe001461028c57806384b0196e1461029f5780638e539e8c146102ba57806391ddadf4146102cd57806395d89b41146102ec575f80fd5b80633644e515116101105780633644e515146101c15780633a46b1a8146101c95780634bf5d7e9146101dc578063587cde1e146101e45780635c19a95c146102275780636fcfff451461023c575f80fd5b806306fdde031461014c578063095ea7b31461016a57806318160ddd1461018d57806323b872dd1461019f578063313ce567146101b2575b5f80fd5b6101546103b7565b60405161016191906119ab565b60405180910390f35b61017d6101783660046119d8565b610447565b6040519015158152602001610161565b6002545b604051908152602001610161565b61017d6101ad366004611a00565b610460565b60405160128152602001610161565b610191610483565b6101916101d73660046119d8565b610491565b610154610515565b61020f6101f2366004611a39565b6001600160a01b039081165f908152600860205260409020541690565b6040516001600160a01b039091168152602001610161565b61023a610235366004611a39565b61058d565b005b61024f61024a366004611a39565b61059c565b60405163ffffffff9091168152602001610161565b610191610272366004611a39565b6001600160a01b03165f9081526020819052604090205490565b61019161029a366004611a39565b6105a6565b6102a76105b0565b6040516101619796959493929190611a52565b6101916102c8366004611ae9565b6105f2565b6102d561065b565b60405165ffffffffffff9091168152602001610161565b610154610664565b610191610302366004611a39565b610673565b61017d6103153660046119d8565b6106a2565b61023a610328366004611b10565b6106af565b61023a61033b366004611b64565b61076b565b61019161034e366004611bc9565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b61038b610386366004611bfa565b6108a1565b60408051825165ffffffffffff1681526020928301516001600160d01b03169281019290925201610161565b6060600380546103c690611c37565b80601f01602080910402602001604051908101604052809291908181526020018280546103f290611c37565b801561043d5780601f106104145761010080835404028352916020019161043d565b820191905f5260205f20905b81548152906001019060200180831161042057829003601f168201915b5050505050905090565b5f336104548185856108db565b60019150505b92915050565b5f3361046d8582856108ed565b610478858585610968565b506001949350505050565b5f61048c6109c5565b905090565b5f8061049b61065b565b90508065ffffffffffff1683106104db57604051637669fc0f60e11b81526004810184905265ffffffffffff821660248201526044015b60405180910390fd5b6105046104e784610aee565b6001600160a01b0386165f90815260096020526040902090610b24565b6001600160d01b0316949350505050565b606061051f610bd4565b65ffffffffffff1661052f61065b565b65ffffffffffff1614610555576040516301bfc1c560e61b815260040160405180910390fd5b5060408051808201909152601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000602082015290565b336105988183610bde565b5050565b5f61045a82610c4f565b5f61045a82610c70565b5f6060805f805f60606105c1610c8d565b6105c9610cba565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b5f806105fc61065b565b90508065ffffffffffff16831061063757604051637669fc0f60e11b81526004810184905265ffffffffffff821660248201526044016104d2565b61064b61064384610aee565b600a90610b24565b6001600160d01b03169392505050565b5f61048c610bd4565b6060600480546103c690611c37565b6001600160a01b0381165f90815260096020526040812061069390610ce7565b6001600160d01b031692915050565b5f33610454818585610968565b834211156106d357604051632341d78760e11b8152600481018590526024016104d2565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b0388169181019190915260608101869052608081018590525f9061074c906107449060a00160405160208183030381529060405280519060200120610d1e565b858585610d4a565b90506107588187610d76565b6107628188610bde565b50505050505050565b8342111561078f5760405163313c898160e11b8152600481018590526024016104d2565b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886107da8c6001600160a01b03165f90815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f61083482610d1e565b90505f61084382878787610d4a565b9050896001600160a01b0316816001600160a01b03161461088a576040516325c0072360e11b81526001600160a01b0380831660048301528b1660248201526044016104d2565b6108958a8a8a6108db565b50505050505050505050565b604080518082019091525f80825260208201526108be8383610dc8565b9392505050565b5f6108be8284611c83565b5f6108be8284611caa565b6108e88383836001610dfc565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f198114610962578181101561095457604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016104d2565b61096284848484035f610dfc565b50505050565b6001600160a01b03831661099157604051634b637e8f60e11b81525f60048201526024016104d2565b6001600160a01b0382166109ba5760405163ec442f0560e01b81525f60048201526024016104d2565b6108e8838383610ece565b5f306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610a1d57507f000000000000000000000000000000000000000000000000000000000000000046145b15610a4757507f000000000000000000000000000000000000000000000000000000000000000090565b61048c604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b5f65ffffffffffff821115610b20576040516306dfcc6560e41b815260306004820152602481018390526044016104d2565b5090565b81545f9081816005811115610b80575f610b3d84610ed9565b610b479085611cca565b5f8881526020902090915081015465ffffffffffff9081169087161015610b7057809150610b7e565b610b7b816001611cdd565b92505b505b5f610b8d87878585610fbd565b90508015610bc757610bb187610ba4600184611cca565b5f91825260209091200190565b54600160301b90046001600160d01b0316610bc9565b5f5b979650505050505050565b5f61048c43610aee565b6001600160a01b038281165f8181526008602052604080822080548686166001600160a01b0319821681179092559151919094169392849290917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46108e88183610c4a8661101c565b611039565b6001600160a01b0381165f9081526009602052604081205461045a906111a2565b6001600160a01b0381165f9081526007602052604081205461045a565b606061048c7f000000000000000000000000000000000000000000000000000000000000000060056111d2565b606061048c7f000000000000000000000000000000000000000000000000000000000000000060066111d2565b80545f908015610d1657610d0083610ba4600184611cca565b54600160301b90046001600160d01b03166108be565b5f9392505050565b5f61045a610d2a6109c5565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f80610d5a8888888861127b565b925092509250610d6a8282611343565b50909695505050505050565b6001600160a01b0382165f9081526007602052604090208054600181019091558181146108e8576040516301d4b62360e61b81526001600160a01b0384166004820152602481018290526044016104d2565b604080518082019091525f80825260208201526001600160a01b0383165f9081526009602052604090206108be90836113fb565b6001600160a01b038416610e255760405163e602df0560e01b81525f60048201526024016104d2565b6001600160a01b038316610e4e57604051634a1406b160e11b81525f60048201526024016104d2565b6001600160a01b038085165f908152600160209081526040808320938716835292905220829055801561096257826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610ec091815260200190565b60405180910390a350505050565b6108e8838383611468565b5f815f03610ee857505f919050565b5f6001610ef4846114ce565b901c6001901b90506001818481610f0d57610f0d611cf0565b048201901c90506001818481610f2557610f25611cf0565b048201901c90506001818481610f3d57610f3d611cf0565b048201901c90506001818481610f5557610f55611cf0565b048201901c90506001818481610f6d57610f6d611cf0565b048201901c90506001818481610f8557610f85611cf0565b048201901c90506001818481610f9d57610f9d611cf0565b048201901c90506108be81828581610fb757610fb7611cf0565b04611561565b5f5b81831015611014575f610fd28484611576565b5f8781526020902090915065ffffffffffff86169082015465ffffffffffff1611156110005780925061100e565b61100b816001611cdd565b93505b50610fbf565b509392505050565b6001600160a01b0381165f9081526020819052604081205461045a565b816001600160a01b0316836001600160a01b03161415801561105a57505f81115b156108e8576001600160a01b03831615611101576001600160a01b0383165f908152600960205260408120819061109c906108d061109786611590565b6115c3565b6001600160d01b031691506001600160d01b03169150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516110f6929190918252602082015260400190565b60405180910390a250505b6001600160a01b038216156108e8576001600160a01b0382165f9081526009602052604081208190611139906108c561109786611590565b6001600160d01b031691506001600160d01b03169150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611193929190918252602082015260400190565b60405180910390a25050505050565b5f63ffffffff821115610b20576040516306dfcc6560e41b815260206004820152602481018390526044016104d2565b606060ff83146111ec576111e5836115fb565b905061045a565b8180546111f890611c37565b80601f016020809104026020016040519081016040528092919081815260200182805461122490611c37565b801561126f5780601f106112465761010080835404028352916020019161126f565b820191905f5260205f20905b81548152906001019060200180831161125257829003601f168201915b5050505050905061045a565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156112b457505f91506003905082611339565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611305573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b03811661133057505f925060019150829050611339565b92505f91508190505b9450945094915050565b5f82600381111561135657611356611d04565b0361135f575050565b600182600381111561137357611373611d04565b036113915760405163f645eedf60e01b815260040160405180910390fd5b60028260038111156113a5576113a5611d04565b036113c65760405163fce698f760e01b8152600481018290526024016104d2565b60038260038111156113da576113da611d04565b03610598576040516335e2f38360e21b8152600481018290526024016104d2565b604080518082019091525f8082526020820152825f018263ffffffff168154811061142857611428611d18565b5f9182526020918290206040805180820190915291015465ffffffffffff81168252600160301b90046001600160d01b0316918101919091529392505050565b611473838383611638565b6001600160a01b0383166114c3575f61148b60025490565b90506001600160d01b03808211156114c057604051630e58ae9360e11b815260048101839052602481018290526044016104d2565b50505b6108e883838361175e565b5f80608083901c156114e257608092831c92015b604083901c156114f457604092831c92015b602083901c1561150657602092831c92015b601083901c1561151857601092831c92015b600883901c1561152a57600892831c92015b600483901c1561153c57600492831c92015b600283901c1561154e57600292831c92015b600183901c1561045a5760010192915050565b5f81831061156f57816108be565b5090919050565b5f6115846002848418611d2c565b6108be90848416611cdd565b5f6001600160d01b03821115610b20576040516306dfcc6560e41b815260d06004820152602481018390526044016104d2565b5f806115ee6115d061065b565b6115e66115dc88610ce7565b868863ffffffff16565b8791906117d3565b915091505b935093915050565b60605f611607836117e0565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b6001600160a01b038316611662578060025f8282546116579190611cdd565b909155506116d29050565b6001600160a01b0383165f90815260208190526040902054818110156116b45760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016104d2565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b0382166116ee5760028054829003905561170c565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161175191815260200190565b60405180910390a3505050565b6001600160a01b0383166117805761177d600a6108c561109784611590565b50505b6001600160a01b0382166117a25761179f600a6108d061109784611590565b50505b6001600160a01b038381165f908152600860205260408082205485841683529120546108e892918216911683611039565b5f806115ee858585611807565b5f60ff8216601f81111561045a57604051632cd44ac360e21b815260040160405180910390fd5b82545f9081908015611923575f61182387610ba4600185611cca565b60408051808201909152905465ffffffffffff808216808452600160301b9092046001600160d01b03166020840152919250908716101561187757604051632520601d60e01b815260040160405180910390fd5b805165ffffffffffff8088169116036118c3578461189a88610ba4600186611cca565b80546001600160d01b0392909216600160301b0265ffffffffffff909216919091179055611913565b6040805180820190915265ffffffffffff80881682526001600160d01b0380881660208085019182528b54600181018d555f8d81529190912094519151909216600160301b029216919091179101555b6020015192508391506115f39050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a555f8a815291822095519251909316600160301b0291909316179201919091559050816115f3565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6108be602083018461197d565b80356001600160a01b03811681146119d3575f80fd5b919050565b5f80604083850312156119e9575f80fd5b6119f2836119bd565b946020939093013593505050565b5f805f60608486031215611a12575f80fd5b611a1b846119bd565b9250611a29602085016119bd565b9150604084013590509250925092565b5f60208284031215611a49575f80fd5b6108be826119bd565b60ff60f81b881681525f602060e06020840152611a7260e084018a61197d565b8381036040850152611a84818a61197d565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825260208088019350909101905f5b81811015611ad757835183529284019291840191600101611abb565b50909c9b505050505050505050505050565b5f60208284031215611af9575f80fd5b5035919050565b803560ff811681146119d3575f80fd5b5f805f805f8060c08789031215611b25575f80fd5b611b2e876119bd565b95506020870135945060408701359350611b4a60608801611b00565b92506080870135915060a087013590509295509295509295565b5f805f805f805f60e0888a031215611b7a575f80fd5b611b83886119bd565b9650611b91602089016119bd565b95506040880135945060608801359350611bad60808901611b00565b925060a0880135915060c0880135905092959891949750929550565b5f8060408385031215611bda575f80fd5b611be3836119bd565b9150611bf1602084016119bd565b90509250929050565b5f8060408385031215611c0b575f80fd5b611c14836119bd565b9150602083013563ffffffff81168114611c2c575f80fd5b809150509250929050565b600181811c90821680611c4b57607f821691505b602082108103611c6957634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b6001600160d01b03818116838216019080821115611ca357611ca3611c6f565b5092915050565b6001600160d01b03828116828216039080821115611ca357611ca3611c6f565b8181038181111561045a5761045a611c6f565b8082018082111561045a5761045a611c6f565b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f82611d4657634e487b7160e01b5f52601260045260245ffd5b50049056fea26469706673582212208edaac9c5679c3ff4de5c399e70a4f88c3aa2b51bb69b57290504c99cd639aac64736f6c63430008190033dec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724",
}

// GovTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use GovTokenMetaData.ABI instead.
var GovTokenABI = GovTokenMetaData.ABI

// GovTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GovTokenMetaData.Bin instead.
var GovTokenBin = GovTokenMetaData.Bin

// DeployGovToken deploys a new Ethereum contract, binding an instance of GovToken to it.
func DeployGovToken(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *GovToken, error) {
	parsed, err := GovTokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GovTokenBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &GovToken{GovTokenCaller: GovTokenCaller{contract: contract}, GovTokenTransactor: GovTokenTransactor{contract: contract}, GovTokenFilterer: GovTokenFilterer{contract: contract}}, nil
}

// GovToken is an auto generated Go binding around an Ethereum contract.
type GovToken struct {
	GovTokenCaller     // Read-only binding to the contract
	GovTokenTransactor // Write-only binding to the contract
	GovTokenFilterer   // Log filterer for contract events
}

// GovTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovTokenSession struct {
	Contract     *GovToken         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GovTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovTokenCallerSession struct {
	Contract *GovTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// GovTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovTokenTransactorSession struct {
	Contract     *GovTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// GovTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovTokenRaw struct {
	Contract *GovToken // Generic contract binding to access the raw methods on
}

// GovTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovTokenCallerRaw struct {
	Contract *GovTokenCaller // Generic read-only contract binding to access the raw methods on
}

// GovTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovTokenTransactorRaw struct {
	Contract *GovTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovToken creates a new instance of GovToken, bound to a specific deployed contract.
func NewGovToken(address common.Address, backend bind.ContractBackend) (*GovToken, error) {
	contract, err := bindGovToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GovToken{GovTokenCaller: GovTokenCaller{contract: contract}, GovTokenTransactor: GovTokenTransactor{contract: contract}, GovTokenFilterer: GovTokenFilterer{contract: contract}}, nil
}

// NewGovTokenCaller creates a new read-only instance of GovToken, bound to a specific deployed contract.
func NewGovTokenCaller(address common.Address, caller bind.ContractCaller) (*GovTokenCaller, error) {
	contract, err := bindGovToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovTokenCaller{contract: contract}, nil
}

// NewGovTokenTransactor creates a new write-only instance of GovToken, bound to a specific deployed contract.
func NewGovTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*GovTokenTransactor, error) {
	contract, err := bindGovToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovTokenTransactor{contract: contract}, nil
}

// NewGovTokenFilterer creates a new log filterer instance of GovToken, bound to a specific deployed contract.
func NewGovTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*GovTokenFilterer, error) {
	contract, err := bindGovToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovTokenFilterer{contract: contract}, nil
}

// bindGovToken binds a generic wrapper to an already deployed contract.
func bindGovToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovToken *GovTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovToken.Contract.GovTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovToken *GovTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovToken.Contract.GovTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovToken *GovTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovToken.Contract.GovTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovToken *GovTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovToken *GovTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovToken *GovTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovToken.Contract.contract.Transact(opts, method, params...)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_GovToken *GovTokenCaller) CLOCKMODE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _GovToken.contract.Call(opts, &out, "CLOCK_MODE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_GovToken *GovTokenSession) CLOCKMODE() (string, error) {
	return _GovToken.Contract.CLOCKMODE(&_GovToken.CallOpts)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_GovToken *GovTokenCallerSession) CLOCKMODE() (string, error) {
	return _GovToken.Contract.CLOCKMODE(&_GovToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_GovToken *GovTokenCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _GovToken.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_GovToken *GovTokenSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _GovToken.Contract.DOMAINSEPARATOR(&_GovToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_GovToken *GovTokenCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _GovToken.Contract.DOMAINSEPARATOR(&_GovToken.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_GovToken *GovTokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _GovToken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_GovToken *GovTokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _GovToken.Contract.Allowance(&_GovToken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_GovToken *GovTokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _GovToken.Contract.Allowance(&_GovToken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_GovToken *GovTokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _GovToken.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_GovToken *GovTokenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _GovToken.Contract.BalanceOf(&_GovToken.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_GovToken *GovTokenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _GovToken.Contract.BalanceOf(&_GovToken.CallOpts, account)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint48,uint208))
func (_GovToken *GovTokenCaller) Checkpoints(opts *bind.CallOpts, account common.Address, pos uint32) (CheckpointsCheckpoint208, error) {
	var out []interface{}
	err := _GovToken.contract.Call(opts, &out, "checkpoints", account, pos)

	if err != nil {
		return *new(CheckpointsCheckpoint208), err
	}

	out0 := *abi.ConvertType(out[0], new(CheckpointsCheckpoint208)).(*CheckpointsCheckpoint208)

	return out0, err

}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint48,uint208))
func (_GovToken *GovTokenSession) Checkpoints(account common.Address, pos uint32) (CheckpointsCheckpoint208, error) {
	return _GovToken.Contract.Checkpoints(&_GovToken.CallOpts, account, pos)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint48,uint208))
func (_GovToken *GovTokenCallerSession) Checkpoints(account common.Address, pos uint32) (CheckpointsCheckpoint208, error) {
	return _GovToken.Contract.Checkpoints(&_GovToken.CallOpts, account, pos)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_GovToken *GovTokenCaller) Clock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _GovToken.contract.Call(opts, &out, "clock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_GovToken *GovTokenSession) Clock() (*big.Int, error) {
	return _GovToken.Contract.Clock(&_GovToken.CallOpts)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_GovToken *GovTokenCallerSession) Clock() (*big.Int, error) {
	return _GovToken.Contract.Clock(&_GovToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_GovToken *GovTokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _GovToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_GovToken *GovTokenSession) Decimals() (uint8, error) {
	return _GovToken.Contract.Decimals(&_GovToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_GovToken *GovTokenCallerSession) Decimals() (uint8, error) {
	return _GovToken.Contract.Decimals(&_GovToken.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_GovToken *GovTokenCaller) Delegates(opts *bind.CallOpts, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _GovToken.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_GovToken *GovTokenSession) Delegates(account common.Address) (common.Address, error) {
	return _GovToken.Contract.Delegates(&_GovToken.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_GovToken *GovTokenCallerSession) Delegates(account common.Address) (common.Address, error) {
	return _GovToken.Contract.Delegates(&_GovToken.CallOpts, account)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_GovToken *GovTokenCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _GovToken.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_GovToken *GovTokenSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _GovToken.Contract.Eip712Domain(&_GovToken.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_GovToken *GovTokenCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _GovToken.Contract.Eip712Domain(&_GovToken.CallOpts)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_GovToken *GovTokenCaller) GetPastTotalSupply(opts *bind.CallOpts, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _GovToken.contract.Call(opts, &out, "getPastTotalSupply", timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_GovToken *GovTokenSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _GovToken.Contract.GetPastTotalSupply(&_GovToken.CallOpts, timepoint)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_GovToken *GovTokenCallerSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _GovToken.Contract.GetPastTotalSupply(&_GovToken.CallOpts, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_GovToken *GovTokenCaller) GetPastVotes(opts *bind.CallOpts, account common.Address, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _GovToken.contract.Call(opts, &out, "getPastVotes", account, timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_GovToken *GovTokenSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _GovToken.Contract.GetPastVotes(&_GovToken.CallOpts, account, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_GovToken *GovTokenCallerSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _GovToken.Contract.GetPastVotes(&_GovToken.CallOpts, account, timepoint)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_GovToken *GovTokenCaller) GetVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _GovToken.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_GovToken *GovTokenSession) GetVotes(account common.Address) (*big.Int, error) {
	return _GovToken.Contract.GetVotes(&_GovToken.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_GovToken *GovTokenCallerSession) GetVotes(account common.Address) (*big.Int, error) {
	return _GovToken.Contract.GetVotes(&_GovToken.CallOpts, account)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_GovToken *GovTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _GovToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_GovToken *GovTokenSession) Name() (string, error) {
	return _GovToken.Contract.Name(&_GovToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_GovToken *GovTokenCallerSession) Name() (string, error) {
	return _GovToken.Contract.Name(&_GovToken.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_GovToken *GovTokenCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _GovToken.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_GovToken *GovTokenSession) Nonces(owner common.Address) (*big.Int, error) {
	return _GovToken.Contract.Nonces(&_GovToken.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_GovToken *GovTokenCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _GovToken.Contract.Nonces(&_GovToken.CallOpts, owner)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_GovToken *GovTokenCaller) NumCheckpoints(opts *bind.CallOpts, account common.Address) (uint32, error) {
	var out []interface{}
	err := _GovToken.contract.Call(opts, &out, "numCheckpoints", account)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_GovToken *GovTokenSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _GovToken.Contract.NumCheckpoints(&_GovToken.CallOpts, account)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_GovToken *GovTokenCallerSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _GovToken.Contract.NumCheckpoints(&_GovToken.CallOpts, account)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_GovToken *GovTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _GovToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_GovToken *GovTokenSession) Symbol() (string, error) {
	return _GovToken.Contract.Symbol(&_GovToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_GovToken *GovTokenCallerSession) Symbol() (string, error) {
	return _GovToken.Contract.Symbol(&_GovToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_GovToken *GovTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _GovToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_GovToken *GovTokenSession) TotalSupply() (*big.Int, error) {
	return _GovToken.Contract.TotalSupply(&_GovToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_GovToken *GovTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _GovToken.Contract.TotalSupply(&_GovToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_GovToken *GovTokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _GovToken.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_GovToken *GovTokenSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _GovToken.Contract.Approve(&_GovToken.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_GovToken *GovTokenTransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _GovToken.Contract.Approve(&_GovToken.TransactOpts, spender, value)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_GovToken *GovTokenTransactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _GovToken.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_GovToken *GovTokenSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _GovToken.Contract.Delegate(&_GovToken.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_GovToken *GovTokenTransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _GovToken.Contract.Delegate(&_GovToken.TransactOpts, delegatee)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_GovToken *GovTokenTransactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _GovToken.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_GovToken *GovTokenSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _GovToken.Contract.DelegateBySig(&_GovToken.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_GovToken *GovTokenTransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _GovToken.Contract.DelegateBySig(&_GovToken.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_GovToken *GovTokenTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _GovToken.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_GovToken *GovTokenSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _GovToken.Contract.Permit(&_GovToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_GovToken *GovTokenTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _GovToken.Contract.Permit(&_GovToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_GovToken *GovTokenTransactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _GovToken.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_GovToken *GovTokenSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _GovToken.Contract.Transfer(&_GovToken.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_GovToken *GovTokenTransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _GovToken.Contract.Transfer(&_GovToken.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_GovToken *GovTokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _GovToken.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_GovToken *GovTokenSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _GovToken.Contract.TransferFrom(&_GovToken.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_GovToken *GovTokenTransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _GovToken.Contract.TransferFrom(&_GovToken.TransactOpts, from, to, value)
}

// GovTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the GovToken contract.
type GovTokenApprovalIterator struct {
	Event *GovTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovTokenApproval represents a Approval event raised by the GovToken contract.
type GovTokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_GovToken *GovTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*GovTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _GovToken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &GovTokenApprovalIterator{contract: _GovToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_GovToken *GovTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *GovTokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _GovToken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovTokenApproval)
				if err := _GovToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_GovToken *GovTokenFilterer) ParseApproval(log types.Log) (*GovTokenApproval, error) {
	event := new(GovTokenApproval)
	if err := _GovToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GovTokenDelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the GovToken contract.
type GovTokenDelegateChangedIterator struct {
	Event *GovTokenDelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovTokenDelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovTokenDelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovTokenDelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovTokenDelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovTokenDelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovTokenDelegateChanged represents a DelegateChanged event raised by the GovToken contract.
type GovTokenDelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_GovToken *GovTokenFilterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*GovTokenDelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _GovToken.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &GovTokenDelegateChangedIterator{contract: _GovToken.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_GovToken *GovTokenFilterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *GovTokenDelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _GovToken.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovTokenDelegateChanged)
				if err := _GovToken.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_GovToken *GovTokenFilterer) ParseDelegateChanged(log types.Log) (*GovTokenDelegateChanged, error) {
	event := new(GovTokenDelegateChanged)
	if err := _GovToken.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GovTokenDelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the GovToken contract.
type GovTokenDelegateVotesChangedIterator struct {
	Event *GovTokenDelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovTokenDelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovTokenDelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovTokenDelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovTokenDelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovTokenDelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovTokenDelegateVotesChanged represents a DelegateVotesChanged event raised by the GovToken contract.
type GovTokenDelegateVotesChanged struct {
	Delegate      common.Address
	PreviousVotes *big.Int
	NewVotes      *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_GovToken *GovTokenFilterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*GovTokenDelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _GovToken.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &GovTokenDelegateVotesChangedIterator{contract: _GovToken.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_GovToken *GovTokenFilterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *GovTokenDelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _GovToken.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovTokenDelegateVotesChanged)
				if err := _GovToken.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_GovToken *GovTokenFilterer) ParseDelegateVotesChanged(log types.Log) (*GovTokenDelegateVotesChanged, error) {
	event := new(GovTokenDelegateVotesChanged)
	if err := _GovToken.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GovTokenEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the GovToken contract.
type GovTokenEIP712DomainChangedIterator struct {
	Event *GovTokenEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovTokenEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovTokenEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovTokenEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovTokenEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovTokenEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovTokenEIP712DomainChanged represents a EIP712DomainChanged event raised by the GovToken contract.
type GovTokenEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_GovToken *GovTokenFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*GovTokenEIP712DomainChangedIterator, error) {

	logs, sub, err := _GovToken.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &GovTokenEIP712DomainChangedIterator{contract: _GovToken.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_GovToken *GovTokenFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *GovTokenEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _GovToken.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovTokenEIP712DomainChanged)
				if err := _GovToken.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_GovToken *GovTokenFilterer) ParseEIP712DomainChanged(log types.Log) (*GovTokenEIP712DomainChanged, error) {
	event := new(GovTokenEIP712DomainChanged)
	if err := _GovToken.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GovTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the GovToken contract.
type GovTokenTransferIterator struct {
	Event *GovTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovTokenTransfer represents a Transfer event raised by the GovToken contract.
type GovTokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_GovToken *GovTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*GovTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _GovToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &GovTokenTransferIterator{contract: _GovToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_GovToken *GovTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *GovTokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _GovToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovTokenTransfer)
				if err := _GovToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_GovToken *GovTokenFilterer) ParseTransfer(log types.Log) (*GovTokenTransfer, error) {
	event := new(GovTokenTransfer)
	if err := _GovToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
